ext.sharedArtifactids = this.&sharedArtifactids

tasks.whenTaskAdded { task ->
    if (task.name.equals("compileDebugJavaWithJavac")) {
        task.doLast {
            FileCollection fileCollection = task.inputs.files
            File file = new File(project.projectDir.absolutePath + '/dendency.txt')
            if (file.exists()) {
                file.delete()
            }

            file.createNewFile()

            fileCollection.files.each {
                println "file1:" + it.absolutePath
                if (project.name.equals("app")) {
                    project.sharedArtifactids.each { String artifactId ->
                        if (it.absolutePath.contains(artifactId) && !it.name.endsWith('.java')) {
                            file.append(it.absolutePath + '\n')
                        }
                    }
                }
            }
        }
    }
}


task createShareDependency(dependsOn: 'assembleDebug', type: Jar) {
    outputs.upToDateWhen { false }
    archiveName = 'shareDependency.jar'
    File jarsPathFile = new File(project.projectDir.absolutePath + 'dendency.txt')
    if (!jarsPathFile.exists()) {
        jarsPathFile.createNewFile()
    }

    def lines = jarsPathFile.readLines()
    ConfigurableFileCollection fileCollection = files(lines)
    fileCollection.each { File file ->
        from(zipTree(file))
    }
    from(project.buildDir.absolutePath + "/intermediates/classes/debug") {
        include 'com/sunkai/*/*.class'
        exclude 'com/sunkai/*/R*.class'
        exclude 'com/sunkai/*/BuildConfig.class'
    }

    destinationDir = file(project.projectDir.absolutePath + "/outputs/jar")
}


afterEvaluate {
    tasks.findByName('assembleDebug').finalizedBy(createShareDependency)
}